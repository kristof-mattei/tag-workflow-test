name: Semantic tags

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  packages: write

jobs:
  move-git-tags:
    runs-on: ubuntu-latest
    steps:
      - name: Dump
        env:
          GITHUB: "${{ toJSON(github) }}"
        run: echo "${GITHUB}"

      - name: Check out repo
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "lts/*"

      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          CACHE_NAME: npm-cache-dependencies
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-

      - name: Install dependencies
        shell: bash
        run: |
          npm install semver

      - name: Split the incoming tag into major, minor and patch
        uses: actions/github-script@v5
        env:
          TAGNAME: ${{ github.ref_name }}
        with:
          github-token: ${{secrets.FOO}}
          script: |
            const semver = require("semver");

            // parse our version
            let parsed = semver.parse(process.env.TAGNAME);

            core.exportVariable("MAJOR", parsed.major);
            core.exportVariable("MINOR", parsed.minor);
            core.exportVariable("PATCH", parsed.patch);

      - name: Install dependencies
        if: ${{ env.ACTIONS_RUNNER_DEBUG == 'true' }}
        shell: bash
        run: |
          npm install serialize-error

      - name: Move v${{ env.MAJOR }} and v${{ env.MAJOR }}.${{ env.MINOR }} tags
        uses: actions/github-script@v5
        env:
          # because the actual github context ref_name isn't there
          TAGNAME: ${{ github.ref_name }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { serializeError } = core.isDebug() ? require("serialize-error") : { serializeError: () => {} };

            const tagsToMove = [
                // already covered by semantic-release, it is what triggers this WF
                // `v${process.env.MAJOR}.${process.env.MINOR}.${process.env.PATCH}`,
                `v${process.env.MAJOR}.${process.env.MINOR}`,
                // only do major if we're off v0, as v0 is the semver exception
                ...(0 !== process.env.MAJOR ? [`v${process.env.MAJOR}`] : [])
            ];

            core.info(`Trying to move the following tags: ${tagsToMove.join(", ")} by deleting and re-creating.`);

            async function move(tag) {
                const ref = {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${tag}`
                };

                try {
                    await github.rest.git.deleteRef({
                        ...ref,
                    });

                    core.info(`Deleted ${tag}.`);
                } catch (e) {
                    core.info(`The tag ${tag} doesn't exist yet, that's OK, it happens on new versions.`);
                    core.debug(serializeError(e));
                }

                try {
                    await github.rest.git.createRef({
                        ...ref,
                        // to delete a tag with deleteRef the format of the ref is tags/{tag}
                        // to create a tag with createRef the format of the ref is /refs/tags/{tag}
                        // # confused
                        ref: `refs/${ref.ref}`,
                        sha: context.sha
                    });

                    core.info(`Created ${tag} on ${context.sha}.`);
                } catch (e) {
                    core.info(`Failed to create tag ${tag}.`);
                    core.debug(serializeError(e));
                }
            }

            await Promise.all(tagsToMove.map(move));

            core.info("All done!");
